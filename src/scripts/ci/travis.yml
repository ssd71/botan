language: cpp

os:
  - osx
  - linux

dist: xenial
sudo: required

compiler:
  - clang
  - gcc

env:
  global:
    - CCACHE_MAXSIZE=1G
    - ANDROID_NDK=android-ndk-r20

  matrix:
    - TARGET="static"

matrix:
  exclude:
    # Skip GCC on OS X entirely
    - os: osx
      compiler: gcc

    # XCode 9.4 ICEs on 32-bit ARM builds
    - os: osx
      env: TARGET="cross-arm32"

    # Run static, docs, lint, bsi, nist, fuzzers, coverage, valgrind,
    # sanitizer, minimized and non-ARM cross builds only on Linux/gcc.
    # The sanitizer builds under Clang run the tests very slowly and
    # cause CI timeouts.

    - compiler: clang
      env: TARGET="static"
    - compiler: clang
      env: TARGET="bsi"
    - compiler: clang
      env: TARGET="nist"
    - compiler: clang
      env: TARGET="lint"
    - compiler: clang
      env: TARGET="docs"
    - compiler: clang
      env: TARGET="coverage"

    - compiler: clang
      env: TARGET="fuzzers"
    - compiler: clang
      env: TARGET="valgrind"
    - compiler: clang
      env: TARGET="mini-shared"
    - compiler: clang
      env: TARGET="cross-win64"
    - compiler: clang
      env: TARGET="cross-ppc32"
    - compiler: clang
      env: TARGET="cross-ppc64"
    - compiler: clang
      env: TARGET="cross-mips64"
    - compiler: clang
      env: TARGET="cross-i386"
    - compiler: clang
      env: TARGET="gcc4.8"

   # No ARM Clang compiler on Linux
    - os: linux
      compiler: clang
      env: TARGET="cross-arm32"
    - os: linux
      compiler: clang
      env: TARGET="cross-arm64"

   # Android NDK is Linux/clang only
    - os: osx
      env: TARGET="cross-android-arm32"
    - os: osx
      env: TARGET="cross-android-arm64"
    - os: linux
      compiler: gcc
      env: TARGET="cross-android-arm32"
    - os: linux
      compiler: gcc
      env: TARGET="cross-android-arm64"

install:
  - ./src/scripts/ci/setup_travis.sh

script:
  - ./src/scripts/ci_build.py --os=$TRAVIS_OS_NAME --cc=$CC --cc-bin=$CXX --without-pylint3 --pkcs11-lib=/usr/lib/softhsm/libsofthsm2.so $TARGET

# whitelist branches to avoid testing feature branches twice (as branch and as pull request)
branches:
  only:
    - master
    - release-2
    - coverity_scan

git:
  depth: 10

cache:
  ccache: true

addons:
  coverity_scan:
    project:
      name: "randombit/botan"
    notification_email: jack@randombit.net
    build_command_prepend: "./configure.py --no-optimizations --with-zlib --with-openssl"
    build_command: "make -j2"
    branch_pattern: coverity_scan
